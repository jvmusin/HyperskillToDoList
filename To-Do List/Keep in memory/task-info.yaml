type: edu
files:
- name: src/index.html
  visible: true
  text: |
    <!doctype html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Document</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |+
    const path = require('path');
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');
    const {StageTest, correct, wrong} = require('hs-test-web');

    class TodoTest extends StageTest {

        page = this.getPage(pagePath)

        tests = [
            this.page.execute(() => {
                if (document.title !== 'To-Do List') {
                    return wrong("The title of the page should be 'To-Do List'")
                }

                return correct();
            }),
            this.page.execute(() => {

                let taskList = document.getElementById("task-list")

                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                const numberOfTasks = tasks.length;
                let counter = 0;

                while (true) {

                    if (counter > numberOfTasks) {
                        return wrong("Looks like after deleting a task it is not removed from the task list!")
                    }

                    const deleteButton = document.querySelector("button.delete-btn")
                    if (deleteButton === null) {
                        break
                    }
                    deleteButton.click()

                    counter++
                }

                taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("After deleting the tasks can't find <ul> tag with id '#task-list'")

                tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 0) {
                    return wrong("After deleting all the tasks there shouldn't be any <li> tag")
                }

                return correct()
            }),
            this.page.execute(() => {
                const tasksName = ['First task', 'Second task', 'Third task', 'Fourth task', 'Fifth task']

                const inputField = document.getElementById("input-task")
                if (inputField === null || inputField.tagName !== 'INPUT')
                    return wrong("Can't find input field with id '#input-task'")

                const addButton = document.getElementById("add-task-button")
                if (addButton === null || addButton.tagName !== 'BUTTON')
                    return wrong("Can't find button with id '#add-task-button'")

                const taskList = document.getElementById("task-list")
                if (taskList === null || taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let currentTaskCounter = 1;

                for (let taskName of tasksName) {
                    inputField.value = taskName
                    addButton.click()

                    const tasks = taskList.getElementsByTagName("li")

                    if (tasks.length !== currentTaskCounter) {
                        return wrong("After adding a task number of the <li> tags is not increased!")
                    }

                    currentTaskCounter++
                }

                return correct()
            }),
            this.page.execute(() => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")
                if (tasks.length !== 5)
                    return wrong("Inside the <ul> tag should be 5 <li> elements after adding 5 tasks!")

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }


                return correct();
            }),
            this.page.execute(() => {
                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                let tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {
                    const taskName = task.querySelector("span.task")

                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    if (taskName.textContent === 'Third task') {
                        const checkbox = task.querySelector("input[type=checkbox]")
                        checkbox.click()
                        break;
                    }
                }

                tasks = taskList.getElementsByTagName("li")

                for (let task of tasks) {

                    const taskName = task.querySelector("span.task")

                    if (taskName === null) {
                        return wrong("After marking a task as completed can not find a <span> tag with 'task' class inside <li> tag")
                    }

                    if (taskName.textContent === 'Third task') {
                        let taskName = task.querySelector("span.task")
                        if (taskName === null)
                            return wrong("Inside each <li> tag should be one <span> tag with 'task' class")

                        if (!taskName.style.textDecoration.includes("line-through") &&
                            !getComputedStyle(taskName).textDecoration.includes("line-through")) {
                            return wrong("If checkbox is checked the task name should be crossed out.\n" +
                                "The span tag with task name should have 'text-decoration: line-trough' style")
                        }

                        return correct()
                    }
                }

                return wrong("Can't find task with name 'Third task' after it was added!")
            }),
            this.node.execute(async () => {
                await this.page.refresh()
                return correct()
            }),
            this.page.execute(async () => {

                const taskList = document.getElementById("task-list")
                if (taskList.tagName !== 'UL')
                    return wrong("Can't find <ul> tag with id '#task-list'")

                const tasks = taskList.getElementsByTagName("li")

                if (tasks.length !== 5) {
                    return wrong("Looks like you didn't store the tasks in the local storage.\n" +
                        "After refreshing the page expected 5 tasks!")
                }

                for (let task of tasks) {
                    const checkbox = task.querySelector("input[type=checkbox]")
                    if (checkbox === null)
                        return wrong("Inside each <li> tag should one <input> tag with 'checkbox' type")

                    const taskName = task.querySelector("span.task")
                    if (taskName === null)
                        return wrong("Inside each <li> tag should one <spane> tag with 'task' class")

                    const deleteButton = task.querySelector("button.delete-btn")
                    if (deleteButton === null)
                        return wrong("Inside each <li> tag should one <button> tag with 'delete-btn' class")
                }

                return correct()
            })
        ]
    }

    it('Test stage', async function () {
        try {
            this.timeout(30000)
        } catch (ignored) {
        }
        await new TodoTest().runTests()
    }, 30000)

  learner_created: false
- name: src/main.js
  visible: true
  text: |-
    function createTask(done, name) {
        const task = document.createElement("li")
        const checkbox = document.createElement("input")
        checkbox.type = "checkbox"
        if (done) checkbox.checked = true

        const span = document.createElement("span")
        span.classList.add("task")
        span.appendChild(document.createTextNode(name))

        const deleteBtn = document.createElement("button")
        deleteBtn.classList.add("delete-btn")
        deleteBtn.appendChild(document.createTextNode("X"))

        deleteBtn.addEventListener("click", function (evt) {
            const listItem = evt.target.parentNode
            const list = listItem.parentNode
            list.removeChild(listItem)
        })

        task.append(checkbox, span, deleteBtn)
        return task
    }

    function newTask(name) {
        return createTask(false, name)
    }

    function taskToModel(taskListItem) {
        const nodes = taskListItem.children
        const completed = nodes[0].checked
        const name = nodes[1].textContent
        console.log([completed, name])
        return {completed: completed, name: name}
    }

    function saveTasks() {
        const taskList = document.getElementById("task-list")
        const tasks = []
        for (const task of taskList.children) tasks.push(taskToModel(task))
        localStorage.setItem("tasks", JSON.stringify(tasks))
    }

    function loadTasks() {
        const taskList = document.getElementById("task-list")
        taskList.innerHTML = ""
        const tasks = JSON.parse(localStorage.getItem("tasks")) || []
        for (let task of tasks) taskList.appendChild(createTask(task.completed, task.name))
    }

    document.getElementById("add-task-button").addEventListener("click", function () {
        const inputField = document.getElementById("input-task")
        const taskName = inputField.value

        if (taskName === "") return

        const taskList = document.getElementById("task-list")
        const task = newTask(taskName);
        taskList.appendChild(task)

        inputField.value = ""

        saveTasks()
    })

    loadTasks()
  learner_created: true
- name: src/style.css
  visible: true
  text: |-
    @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

    html {
        height: 100%;
        font-family: 'Roboto', sans-serif;
    }

    body {
        padding: 0;
        margin: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .content {
        width: 70%;
        max-width: 600px;
        display: flex;
        flex-direction: column;
    }

    #input-task-block {
        display: flex;
    }

    #input-task {
        flex-grow: 1;
        border-width: 0;
        border-bottom-color: #70587c;
        border-bottom-width: 3px;
    }

    #add-task-button {
        margin-left: 10px;
        background-color: #c7b8db;
        border: 0;
        padding: 10px;
        color: white;
        font-weight: bold;
    }

    #task-list {
        list-style-type: none;
        list-style-position: inside;
        padding-left: 0;
    }

    #task-list li {
        display: flex;
        margin-top: 15px;
    }

    .task {
        flex-grow: 1;
        display: inline-block;
        margin-left: 20px;
        align-self: center;
    }

    .delete-btn {
        border-width: 0;
        background-color: red;
        border-radius: 50%;
        color: white;
        padding: 5px;
        width: 20px;
        height: 25px;
    }

    input:checked + span {
        text-decoration: line-through;
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/183/stages/930/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Wed, 30 Nov 2022 15:44:23 UTC"
record: -1
